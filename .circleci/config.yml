version: 2.1

orbs:
  win: circleci/windows@1.0.0

workflows:
  version: 2
  build_and_test_all:
    jobs:
      - build-test-linux-clang11
      - build-test-linux-optimized
      - build-test-linux-valgrind:
          requires:
            - build-test-linux-optimized
      - build-test-linux-drd:
          requires:
            - build-test-linux-optimized
      - build-test-linux-32bit
      - build-test-osx
      - build-test-windows

jobs:
  build-test-linux-valgrind:
    docker:
      - image: ldcircleci/ld-c-sdk-ubuntu  # defined in sdks-ci-docker project
      - image: redis
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y && apt-get install -y git
      - run:
          name: Build
          command: |
            mkdir build && cd build
            cmake -D REDIS_STORE=ON ..
            cmake --build .
      - run:
          name: Unit test with valgrind
          command: |
            cd build
            valgrind --error-exitcode=100 --leak-check=full ./tests/google_tests

  build-test-linux-drd:
    docker:
      - image: ldcircleci/ld-c-sdk-ubuntu  # defined in sdks-ci-docker project
      - image: redis
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y && apt-get install -y git
      - run:
          name: Build
          command: |
            mkdir build && cd build
            cmake -D REDIS_STORE=ON ..
            cmake --build .
      - run:
          name: Unit test with drd
          command: |
            cd build
            valgrind --tool=drd --suppressions=../valgrind-suppressions.txt --error-exitcode=100 ./tests/google_tests

  build-test-linux-optimized:
    docker:
      - image: ldcircleci/ld-c-sdk-ubuntu  # defined in sdks-ci-docker project
      - image: redis
    environment:
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y && apt-get install -y git
      - run:
          name: Build
          command: |
            mkdir build && cd build
            cmake -D CMAKE_BUILD_TYPE=Release -D REDIS_STORE=ON -D ENABLE_CMAKE_PROJECT_TESTS=ON -D CMAKE_INSTALL_PREFIX=./INSTALL ..
            cmake --build . --target install
      - run:
          name: Unit test
          command: |
            cd build
            GTEST_OUTPUT="xml:$(pwd)/../reports/" make test

      - store_test_results:
          path: reports

  build-test-linux-clang11:
    docker:
      - image: ubuntu:20.04
      - image: redis
    environment:
      CTEST_OUTPUT_ON_FAILURE: 1
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y && apt-get install -y \
              libcurl4-openssl-dev \
              libpcre3-dev \
              libhiredis-dev \
              cmake \
              clang-11 \
              git \
              curl
      - run:
          name: Build
          command: |
            export CC=/usr/bin/clang-11
            export CXX=/usr/bin/clang++-11
            mkdir build && cd build
            cmake -D CMAKE_BUILD_TYPE=Release -D REDIS_STORE=ON -D ENABLE_CMAKE_PROJECT_TESTS=ON -D CMAKE_INSTALL_PREFIX=./INSTALL ..
            cmake --build . --target install
      - run:
          name: Unit test
          command: |
            cd build
            GTEST_OUTPUT="xml:$(pwd)/../reports/" make test
      - store_test_results:
          path: reports
      - run:
          name: make contract test output directory
          command: mkdir /tmp/test-results
      - run: make build-contract-tests
      - run:
          command: make start-contract-test-service
          background: true
      - run:
          name: run contract tests
          command: TEST_HARNESS_PARAMS="-junit /tmp/test-results/contract-tests-junit.xml -skip-from testharness-suppressions.txt" make run-contract-tests
      - store_test_results:
          path: /tmp/test-results/


  build-test-linux-32bit:
    docker:
      - image: i386/ubuntu:18.04
      - image: redis
    environment:
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install -y \
              gpg \
              wget \
              libcurl4-openssl-dev \
              libpcre3-dev \
              libhiredis-dev \
              build-essential \
              git
      - run:
          name: Obtain recent 32-bit cmake from Kitware # Ubuntu repositories only contain cmake 3.10; we require >= 3.11.
          command: |
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            apt-get update -y
            apt-get install -y cmake
      - run:
          name: Build
          command: |
            mkdir build && cd build
            cmake -D REDIS_STORE=ON -D ENABLE_CMAKE_PROJECT_TESTS=ON CMAKE_INSTALL_PREFIX=./INSTALL ..
            cmake --build . --target install
      - run:
          name: Test
          command: |
            cd build
            GTEST_OUTPUT="xml:$(pwd)/../reports/" make test
      - store_test_results:
          path: reports

  build-test-osx:
    macos:
      xcode: "12.5.1"
    resource_class: macos.x86.medium.gen2
    environment:
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - checkout
      - run:
          name: Install redis
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install redis
      - run:
          name: Start Redis
          command: redis-server
          background: true
      - run:
          name: Install prerequisites
          command: ./.ldrelease/mac-prepare.sh
      - run:
          name: Build
          command: |
            mkdir build && cd build
            cmake -D REDIS_STORE=ON -D ENABLE_CMAKE_PROJECT_TESTS=ON -D CMAKE_INSTALL_PREFIX=./INSTALL ..
            cmake --build . --target install
      - run:
          name: Test
          command: |
            cd build
            GTEST_OUTPUT="xml:$(pwd)/../reports/" make test
      - store_test_results:
          path: reports

  build-test-windows:
    executor:
      name: win/vs2019
      shell: powershell.exe
    environment:
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - checkout
      - run:
          name: Build
          command: ./.ldrelease/build.ps1
      - run:
          name: Test
          command: ./.ldrelease/test.ps1
      - store_test_results:
          path: reports
