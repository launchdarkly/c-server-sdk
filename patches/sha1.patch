diff --git a/sha1.c b/sha1.c
index fe8da83..aba4c2c 100644
--- a/sha1.c
+++ b/sha1.c
@@ -51,7 +51,7 @@ A million repetitions of "a"
 
 /* Hash a single 512-bit block. This is the core of the algorithm. */
 
-void SHA1Transform(
+void clibs_SHA1Transform(
     uint32_t state[5],
     const unsigned char buffer[64]
 )
@@ -177,9 +177,9 @@ void SHA1Transform(
 }
 
 
-/* SHA1Init - Initialize new context */
+/* clibs_SHA1Init - Initialize new context */
 
-void SHA1Init(
+void clibs_SHA1Init(
     SHA1_CTX * context
 )
 {
@@ -195,7 +195,7 @@ void SHA1Init(
 
 /* Run your data through this. */
 
-void SHA1Update(
+void clibs_SHA1Update(
     SHA1_CTX * context,
     const unsigned char *data,
     uint32_t len
@@ -213,10 +213,10 @@ void SHA1Update(
     if ((j + len) > 63)
     {
         memcpy(&context->buffer[j], data, (i = 64 - j));
-        SHA1Transform(context->state, context->buffer);
+        clibs_SHA1Transform(context->state, context->buffer);
         for (; i + 63 < len; i += 64)
         {
-            SHA1Transform(context->state, &data[i]);
+            clibs_SHA1Transform(context->state, &data[i]);
         }
         j = 0;
     }
@@ -228,7 +228,7 @@ void SHA1Update(
 
 /* Add padding and return the message digest. */
 
-void SHA1Final(
+void clibs_SHA1Final(
     unsigned char digest[20],
     SHA1_CTX * context
 )
@@ -262,13 +262,13 @@ void SHA1Final(
     }
 #endif
     c = 0200;
-    SHA1Update(context, &c, 1);
+    clibs_SHA1Update(context, &c, 1);
     while ((context->count[0] & 504) != 448)
     {
         c = 0000;
-        SHA1Update(context, &c, 1);
+        clibs_SHA1Update(context, &c, 1);
     }
-    SHA1Update(context, finalcount, 8); /* Should cause a SHA1Transform() */
+    clibs_SHA1Update(context, finalcount, 8); /* Should cause a clibs_SHA1Transform() */
     for (i = 0; i < 20; i++)
     {
         digest[i] = (unsigned char)
@@ -279,7 +279,7 @@ void SHA1Final(
     memset(&finalcount, '\0', sizeof(finalcount));
 }
 
-void SHA1(
+void clibs_SHA1(
     char *hash_out,
     const char *str,
     int len)
@@ -287,9 +287,8 @@ void SHA1(
     SHA1_CTX ctx;
     unsigned int ii;
 
-    SHA1Init(&ctx);
+    clibs_SHA1Init(&ctx);
     for (ii=0; ii<len; ii+=1)
-        SHA1Update(&ctx, (const unsigned char*)str + ii, 1);
-    SHA1Final((unsigned char *)hash_out, &ctx);
+        clibs_SHA1Update(&ctx, (const unsigned char*)str + ii, 1);
+    clibs_SHA1Final((unsigned char *)hash_out, &ctx);
 }
-
diff --git a/sha1.h b/sha1.h
index 96bb008..2f7eb71 100644
--- a/sha1.h
+++ b/sha1.h
@@ -16,27 +16,27 @@ typedef struct
     unsigned char buffer[64];
 } SHA1_CTX;
 
-void SHA1Transform(
+void clibs_SHA1Transform(
     uint32_t state[5],
     const unsigned char buffer[64]
     );
 
-void SHA1Init(
+void clibs_SHA1Init(
     SHA1_CTX * context
     );
 
-void SHA1Update(
+void clibs_SHA1Update(
     SHA1_CTX * context,
     const unsigned char *data,
     uint32_t len
     );
 
-void SHA1Final(
+void clibs_SHA1Final(
     unsigned char digest[20],
     SHA1_CTX * context
     );
 
-void SHA1(
+void clibs_SHA1(
     char *hash_out,
     const char *str,
     int len);
